on:
  workflow_dispatch:
    inputs:
      build_number:
        description: "Build number"
        required: true
        default: ""

name: Build PROD

jobs:
  deploy_back:
    name: Deploy Back
    runs-on: ubuntu-latest

    steps:
      - name: Display build number
        run: echo "Deploying build back ${{ github.event.inputs.build_number }} to dev"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: 205816504133.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: nerengo_back
        run: |
          # Build a docker container and push it back to ECR 
          cd back
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.event.inputs.build_number }} .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.event.inputs.build_number }}
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.event.inputs.build_number }}"

      - name: AWS token and authenticate your Docker client
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_HOST }}
          username: ${{ secrets.EC2_INSTANCE_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: 22
          script: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 205816504133.dkr.ecr.us-east-1.amazonaws.com

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_HOST }}
          username: ${{ secrets.EC2_INSTANCE_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Stop energeo_back_prod container" &&

            docker stop energeo_back_prod &&

            docker run \
              --rm \
              -d \
              -p 2992:3000 \
              --name energeo_back_prod \
              -e BACK_PORT=${{ secrets.BACK_PORT }} \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
              -e AWS_REGION=${{ secrets.AWS_REGION }} \
              -e AWS_BUCKET=${{ secrets.AWS_BUCKET }} \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e AWS_FOLDER=${{ secrets.AWS_FOLDER }} \
              -e AWS_PUBLIC_URL=${{ secrets.AWS_PUBLIC_URL }} \
              -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
              205816504133.dkr.ecr.us-east-1.amazonaws.com/nerengo_back:${{ github.event.inputs.build_number }}

  deploy_front:
    name: Deploy Front
    runs-on: ubuntu-latest

    steps:
      - name: Display build number
        run: echo "Deploying build front ${{ github.event.inputs.build_number }} to dev"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: 205816504133.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: energeo_front
        run: |
          # Build a docker container and push it front to ECR 
          cd front
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.event.inputs.build_number }} .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.event.inputs.build_number }}
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.event.inputs.build_number }}"

      - name: AWS token and authenticate your Docker client
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_HOST }}
          username: ${{ secrets.EC2_INSTANCE_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: 22
          script: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 205816504133.dkr.ecr.us-east-1.amazonaws.com

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_HOST }}
          username: ${{ secrets.EC2_INSTANCE_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Stop energeo_front_prod container" &&

            

            docker run \
              --rm \
              -d \
              -p 3000:3000 \
              --name energeo_front_prod \
              -e FRONT_PORT=3000 \
              -e BACKEND_URL=http://localhost:3001/ \
              -e GOOGLE_CLIENT_ID=982924184000-39oshbvc7iudnoclnlc2kmbsu1lt18aa.apps.googleusercontent.com \
              205816504133.dkr.ecr.us-east-1.amazonaws.com/energeo_front:${{ github.event.inputs.build_number }}
